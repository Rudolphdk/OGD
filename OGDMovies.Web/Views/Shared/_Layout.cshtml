@using OGDMovies.Common.Enums

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>@ViewBag.Title - My ASP.NET Application</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link href="http://code.jquery.com/ui/1.10.2/themes/smoothness/jquery-ui.css" rel="Stylesheet">
    <link href="~/Content/jquery-ui.css" rel="stylesheet" />
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
</head>
<body>

    <nav class="navbar navbar-inverse navbar-fixed-top">
        <div class="container-fluid">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @LinkExtensions.ActionLink(Html, "OGD Movie Database", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            </div>
            <div id="topnav" class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    @{
                        //Dynamicaly add navigation links based on Enum. Show all except search
                        foreach (var movieRelevance in Enum.GetNames(typeof(MovieRelevance)).Where(s => s.ToLower() != "search"))
                        {
                            Enum.TryParse(movieRelevance, out MovieRelevance _enum);

                            <li>@LinkExtensions.ActionLink(Html, CustomEnumHelper.DisplayNameFor(_enum), $"Relevance", new { relevance = movieRelevance })</li>
                        }
                    }
                </ul>
                <ul class="nav navbar-nav navbar-right">
                    <li style="padding: 12px">
                        <div class="fb-login-button" data-max-rows="1" data-size="medium"
                             data-button-type="login_with" data-show-faces="false"
                             data-auto-logout-link="false" data-use-continue-as="true"></div>
                    </li>
                    <li>
                        <form method="post" action="@Url.Action("Search", "Home")" class="navbar-form">
                            <div class="input-group">
                                <input id="search" type="text" placeholder="Search.." name="query" class="form-control">
                                <div class="input-group-btn">
                                    <button class="btn btn-default" type="submit">
                                        <i class="glyphicon glyphicon-search"></i>
                                    </button>
                                </div>
                            </div>
                        </form>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    <br/>
    <div class="container body-content">
        @RenderBody()
        <hr />
        <footer>
            <p>&copy; @DateTime.Now.Year - OGD Movie Database - Created by Rudolph de kock</p>
        </footer>
    </div>
    <div id="fb-root"></div>
    <script>
        (function (d, s, id) {
            var js, fjs = d.getElementsByTagName(s)[0];
            if (d.getElementById(id)) return;
            js = d.createElement(s);
            js.id = id;
            js.src =
                'https://connect.facebook.net/en_US/sdk.js#xfbml=1&autoLogAppEvents=1&version=v3.2&appId=2175976735978710';
            fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));
    </script>
    <script>
        // This is called with the results from from FB.getLoginStatus().
        function statusChangeCallback(response) {
            console.log('statusChangeCallback');
            console.log(response);
            // The response object is returned with a status field that lets the
            // app know the current login status of the person.
            // Full docs on the response object can be found in the documentation
            // for FB.getLoginStatus().
            if (response.status === 'connected') {
                // Logged into your app and Facebook.
                testAPI();
            } else {
                // The person is not logged into your app or we are unable to tell.
                document.getElementById('status').innerHTML = 'Please log ' +
                    'into this app.';
            }
        }

        // This function is called when someone finishes with the Login
        // Button.  See the onlogin handler attached to it in the sample
        // code below.
        function checkLoginState() {
            FB.getLoginStatus(function (response) {
                statusChangeCallback(response);
            });
        }

        window.fbAsyncInit = function () {
            FB.init({
                appId: '2175976735978710',
                cookie: true, // enable cookies to allow the server to access
                // the session
                xfbml: true, // parse social plugins on this page
                version: 'v2.8' // use graph api version 2.8
            });

            // Now that we've initialized the JavaScript SDK, we call
            // FB.getLoginStatus().  This function gets the state of the
            // person visiting this page and can return one of three states to
            // the callback you provide.  They can be:
            //
            // 1. Logged into your app ('connected')
            // 2. Logged into Facebook, but not your app ('not_authorized')
            // 3. Not logged into Facebook and can't tell if they are logged into
            //    your app or not.
            //
            // These three cases are handled in the callback function.

            FB.getLoginStatus(function (response) {
                statusChangeCallback(response);
            });

        };

        // Here we run a very simple test of the Graph API after login is
        // successful.  See statusChangeCallback() for when this call is made.
        function testAPI() {
            console.log('Welcome!  Fetching your information.... ');
            FB.api('/me',
                function (response) {
                    console.log('Successful login for: ' + response.name);
                });
        }
    </script>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
    <script src="https://code.jquery.com/jquery-migrate-3.0.0.min.js "></script>
    <script src="http://code.jquery.com/ui/1.10.2/jquery-ui.js"></script>
    <script src="~/Scripts/jquery-ui-1.12.1.js"></script>
    <script src="~/Scripts/jquery-ui.js"></script>
    <script type="text/javascript">
    $(document).ready(function() {
        var requestHeaders = {
            "accept": "application/json;odata=verbose"
        }

        function updateTextBox(event, ui) {
            $(this).val(ui.item.Title);
            return false;
        }

        $("#search").autocomplete({
                minLength: 3,
                focus: updateTextBox,
                select: updateTextBox,
                source: function(request, response) {
                    $.ajax({
                        url: '@Url.Action("AutoCompleteMovieTitles", "Home")',
                        dataType: 'json',
                        method: 'post',
                        async: true,
                        headers: requestHeaders,
                        data: { query: request.term },
                        success: function(data) {
                            response(data);
                        }
                    });
                }
            })
            .autocomplete('instance')._renderItem = function(ul, item) {
                return $('<li>')
                    .append('<a><img class="thumbnail tmb" width="50%" src="' + item.ImageUrl + '" /><p><b>' + item.Title +'</b></p></a>')
                    .appendTo(ul);
            }
    });
    </script>
</body>
</html>
